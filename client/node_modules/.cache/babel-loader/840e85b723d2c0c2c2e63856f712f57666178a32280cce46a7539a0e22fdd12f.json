{"ast":null,"code":"import _slicedToArray from\"/home/rodion/Docs/production/CollegeRU/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{React,useState,useEffect}from\"react\";import{BrowserRouter}from\"react-router-dom\";import AppRouter from\"./components/AppRouter/AppRouter.jsx\";import Loading from\"./components/Loading/Loading.jsx\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var App=function App(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoaded=_useState4[0],setIsLoaded=_useState4[1];// let [userdata, setUserData] = useState(null)\n// const [items, setItems] = useState([]);\n// const [[id, body, title], setRequest] = useState('')\n// Примечание: пустой массив зависимостей [] означает, что\n// этот useEffect будет запущен один раз\n// аналогично componentDidMount()\nuseEffect(function(){fetch(\"http://45.141.78.192:9000/\").then(function(res){return res.json();}).then(function(result){setIsLoaded(true);// setUserData(result);\n},// Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n// чтобы не перехватывать исключения из ошибок в самих компонентах.\nfunction(error){setIsLoaded(true);setError(error);});},[]);if(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \",error.message]});}else if(!isLoaded){return/*#__PURE__*/_jsx(Loading,{});}// let [, sumbitPost] = useState('')\n// useEffect(() => {\n//     fetch(\"http://localhost:9000/\", {method: 'POST', body: JSON.stringify()})\n//     .then((res) => res.json())\n//     .then((data) => setRequest(data.id, data.body, data.title));\n// }, []);\n//     console.log(items)\n//     // console.log(id, body, title)\n// userdata = JSON.stringify(userdata)\nreturn/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsx(AppRouter,{})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","AppRouter","Loading","jsxs","_jsxs","jsx","_jsx","App","_useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","isLoaded","setIsLoaded","fetch","then","res","json","result","children","message"],"sources":["/home/rodion/Docs/production/CollegeRU/client/src/App.js"],"sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter/AppRouter.jsx\";\nimport Loading from \"./components/Loading/Loading.jsx\";\n\n\n\n\nconst App = () => {\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    // let [userdata, setUserData] = useState(null)\n    // const [items, setItems] = useState([]);\n    // const [[id, body, title], setRequest] = useState('')\n// Примечание: пустой массив зависимостей [] означает, что\n  // этот useEffect будет запущен один раз\n  // аналогично componentDidMount()\n    useEffect(() => {\n        fetch(\"http://45.141.78.192:9000/\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                setIsLoaded(true);\n                // setUserData(result);\n            },\n            // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n            // чтобы не перехватывать исключения из ошибок в самих компонентах.\n            (error) => {\n                setIsLoaded(true);\n                setError(error);\n            }\n        )\n    }, [])\n\n    if (error) {\n        return <div>Ошибка: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <Loading />;\n    }\n    // let [, sumbitPost] = useState('')\n    // useEffect(() => {\n    //     fetch(\"http://localhost:9000/\", {method: 'POST', body: JSON.stringify()})\n    //     .then((res) => res.json())\n    //     .then((data) => setRequest(data.id, data.body, data.title));\n    // }, []);\n    \n//     console.log(items)\n//     // console.log(id, body, title)\n    // userdata = JSON.stringify(userdata)\n    return(\n        \n            <BrowserRouter>\n            {/* <div>\n                {userdata}\n            </div> */}\n                {/* <div>\n                    {items.body} {items.id} {items.title}<br/>\n                    <form method=\"POST\">\n                        <label>\n                        Name:\n                        <input type=\"text\"  name=\"name\" />\n                        </label>\n                        <label>\n                            Email\n                        </label>\n                        <input type=\"text\" name=\"email\" />\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div> */}\n                <AppRouter />\n            </BrowserRouter>\n        )\n\n}\n\nexport default App;\n"],"mappings":"mIAAA,OAASA,KAAK,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,aAAa,KAAQ,kBAAkB,CAChD,MAAO,CAAAC,SAAS,KAAM,sCAAsC,CAC5D,MAAO,CAAAC,OAAO,KAAM,kCAAkC,CAAC,OAAAC,IAAA,IAAAC,KAAA,gCAAAC,GAAA,IAAAC,IAAA,yBAKvD,GAAM,CAAAC,GAAG,CAAG,QAAN,CAAAA,GAAGA,CAAA,CAAS,CAEd,IAAAC,SAAA,CAA0BV,QAAQ,CAAC,IAAI,CAAC,CAAAW,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAjCG,KAAK,CAAAF,UAAA,IAAEG,QAAQ,CAAAH,UAAA,IACtB,IAAAI,UAAA,CAAgCf,QAAQ,CAAC,KAAK,CAAC,CAAAgB,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAxCE,QAAQ,CAAAD,UAAA,IAAEE,WAAW,CAAAF,UAAA,IAC5B;AACA;AACA;AACJ;AACE;AACA;AACEf,SAAS,CAAC,UAAM,CACZkB,KAAK,CAAC,4BAA4B,CAAC,CAClCC,IAAI,CAAC,SAAAC,GAAG,QAAI,CAAAA,GAAG,CAACC,IAAI,EAAE,GAAC,CACvBF,IAAI,CACD,SAACG,MAAM,CAAK,CACRL,WAAW,CAAC,IAAI,CAAC,CACjB;AACJ,CAAC,CACD;AACA;AACA,SAACL,KAAK,CAAK,CACPK,WAAW,CAAC,IAAI,CAAC,CACjBJ,QAAQ,CAACD,KAAK,CAAC,CACnB,CAAC,CACJ,CACL,CAAC,CAAE,EAAE,CAAC,CAEN,GAAIA,KAAK,CAAE,CACP,mBAAOP,KAAA,QAAAkB,QAAA,EAAK,wCAAQ,CAACX,KAAK,CAACY,OAAO,GAAO,CAC7C,CAAC,IAAM,IAAI,CAACR,QAAQ,CAAE,CAClB,mBAAOT,IAAA,CAACJ,OAAO,IAAG,CACtB,CACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACI;AACA,mBAEQI,IAAA,CAACN,aAAa,EAAAsB,QAAA,cAkBVhB,IAAA,CAACL,SAAS,IAAG,EACD,CAG5B,CAAC,CAED,cAAe,CAAAM,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}